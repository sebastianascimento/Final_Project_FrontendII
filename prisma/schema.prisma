
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User[]
  products   Product[]
  categories Category[]
  brands     Brand[]
  customers  Customer[]
  suppliers  Supplier[]
  orders     Order[]
  stocks     Stock[]
  shippings  Shipping[]

  // Adicionar relações faltantes
  employees       Employee[] // Novo
  supplierReviews SupplierReview[] // Novo
  reviews         Review[] // ADICIONADO: Relação com Reviews
}

// User - OK, já bem estruturado
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String?   @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  accounts Account[]
  sessions Session[]
}

// NextAuth models - Sem alterações
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Admin - Sem companyId (assumindo ser global ao sistema)
model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Product - OK, já bem estruturado
model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float

  category   Category? @relation(fields: [categoryId], references: [id], map: "Product_categoryId_fkey")
  categoryId Int?
  brand      Brand?    @relation(fields: [brandId], references: [id], map: "Product_brandId_fkey")
  brandId    Int?
  supplier   Supplier? @relation(fields: [supplierId], references: [id], map: "Product_supplierId_fkey")
  supplierId Int?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  reviews   Review[]
  stock     Stock[]
  orders    Order[]
  shippings Shipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, companyId])
}

// Category - OK
model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([name, companyId])
}

// Brand - OK
model Brand {
  id          Int       @id @default(autoincrement())
  name        String
  logo        String?
  description String?
  products    Product[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([name, companyId])
}

// Review - PRECISA ADICIONAR companyId
model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())

  // NOVO: Adicionar relação com empresa
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

// Order - OK
model Order {
  id         Int         @id @default(autoincrement())
  product    Product     @relation(fields: [productId], references: [id])
  productId  Int
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId Int
  address    String
  date       DateTime    @default(now())
  quantity   Int
  status     OrderStatus

  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

// Customer - OK
model Customer {
  id      Int     @id @default(autoincrement())
  name    String
  email   String
  address String
  picture String?
  orders  Order[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([name, companyId])
  @@unique([email, companyId])
}

// Employee - PRECISA ADICIONAR companyId
model Employee {
  id        Int        @id @default(autoincrement())
  name      String
  shippings Shipping[] @relation("ShippingEmployees")

  // NOVO: Adicionar relação com empresa
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  // NOVO: Garantir unicidade por empresa
  @@unique([name, companyId])
}

// Shipping - OK
model Shipping {
  id                Int        @id @default(autoincrement())
  name              String
  status            String
  carrier           String
  estimatedDelivery DateTime
  stock             Stock      @relation(fields: [stockId], references: [id])
  stockId           Int
  product           Product    @relation(fields: [productId], references: [id])
  productId         Int
  employees         Employee[] @relation("ShippingEmployees")

  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

// Stock - OK
model Stock {
  id              Int              @id @default(autoincrement())
  product         Product          @relation(fields: [productId], references: [id])
  productId       Int
  stockLevel      Int
  supplier        Supplier         @relation(fields: [supplierId], references: [id])
  supplierId      Int
  supplierReviews SupplierReview[]
  shippings       Shipping[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

// Supplier - OK
model Supplier {
  id          Int              @id @default(autoincrement())
  name        String
  contactInfo String
  products    Product[]
  stock       Stock[]
  reviews     SupplierReview[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@unique([name, companyId])
}

// SupplierReview - PRECISA ADICIONAR companyId
model SupplierReview {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId Int
  createdAt  DateTime @default(now())
  stock      Stock?   @relation(fields: [stockId], references: [id])
  stockId    Int?

  // NOVO: Adicionar relação com empresa
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
